#BlueJ class context
comment0.target=GestorTareas
comment1.params=
comment1.target=GestorTareas()
comment1.text=\r\n\ 01.\ Constructor\ de\ la\ clase\r\n
comment10.params=
comment10.target=void\ impmirListadoTareas()
comment10.text=\r\n\ 15.\ imprimirListadoTareas\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\r\n\ en\ blanco.\ El\ m\u00E9todo\ no\ devuelve\ nada.\r\n
comment11.params=
comment11.target=java.lang.String\ getTareasEnUnaSolaLinea()
comment11.text=\r\n\ 16.\ getTareasEnUnaSolaLinea\ Devuelve\ todas\ las\ tareas\ pendientes\ en\ una\ sola\r\n\ linea\ separadas\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corcehete\ al\ inicio\ y\r\n\ al\ final\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3]".\ Si\ no\ hay\ tareas\ devuelve\ la\r\n\ cadena\ "[]".\ Es\ buena\ idea\ echar\ un\ vistazo\ a\ la\ API\ de\ la\ clase\ String\ si\r\n\ nos\ atascamos\ en\ busca\ de\ alg\u00FAn\ metodo\ que\ nos\ ayude\r\n
comment12.params=
comment12.target=java.lang.String\ getTareasEnUnaSolaLinea2()
comment12.text=\r\n\ Solucion\ alternativa\ al\ metodo\ 16\r\n
comment13.params=
comment13.target=void\ imprimirTareasEnUnaSolaLinea()
comment13.text=\r\n\ 17.\ imprimirTareasEnUnaSolaLinea\ Imrime\ todas\ las\ tareas\ pendientes\ en\ una\r\n\ sola\ linea\ separadas\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corcehete\ al\r\n\ inicio\ y\ al\ final\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3].\ Si\ no\ hay\ tareas\r\n\ imprime\ una\ l\u00EDnea\ con\ dos\ corchetes\ del\ tipo\ "[]".\r\n
comment14.params=textoABuscar
comment14.target=boolean\ existeTareaConElTexto(java.lang.String)
comment14.text=\r\n\ 18.\ existeTareaConElTexto\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\r\n\ contenga\ el\ texto\ indicado\ como\ parametro,\ false\ en\ caso\ contrario.\ Hay\ que\r\n\ hacerlo\ con\ bucle\ for-each.\r\n
comment15.params=
comment15.target=java.lang.String\ getTareasImportantes()
comment15.text=\r\n\ 19.\ getTareasImportantes\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\ (importante)\\n3.\ Estudiar\r\n\ (Importante)\\n")\ siempre\ que\ la\ tarea\ contenga\ la\ palabra\ "importante"\ (que\r\n\ puede\ aparecer\ en\ may\u00FAsculas\ o\ en\ min\u00FAsculas).\ Si\ no\ hay\ tareas\ de\ ese\ tipo\r\n\ devuelve\ la\ cadena\ vac\u00EDa\r\n
comment16.params=
comment16.target=void\ imprimirTareasImportantes()
comment16.text=\r\n\ 20.\ imprimirTareasImportantes\ Imprime\ por\ pantalla\ todas\ las\ tareas\r\n\ pendientes,\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\r\n\ punto\ y\ un\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\ (importante)\\n3.\ Estudiar\r\n\ (Importante)\\n")\ siempre\ que\ la\ tarea\ contenga\ la\ palabra\ "importante"\ (que\r\n\ puede\ aparecer\ en\ may\u00FAsculas\ o\ en\ min\u00FAsculas).\ Si\ no\ hay\ tareas\ de\ ese\ tipo\r\n\ imprime\ una\ l\u00EDnea\ en\ blanco.\r\n\r\n
comment17.params=
comment17.target=java.lang.String\ getTareasImpares()
comment17.text=\r\n\ 21.\ getTareasImpares\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\r\n\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\\n3.Estudiar\\n")\ siempre\ que\ la\ tarea\r\n\ ocupe\ una\ posici\u00F3n\ impar.\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ devuelve\ la\ cadena\r\n\ vac\u00EDa.\r\n
comment18.params=
comment18.target=void\ imprimirTareasImpares()
comment18.text=\r\n\ 22.\ imprimirTareasImpares\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\r\n\ un\ punto\ y\ un\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama")\ siempre\ que\ la\ tarea\r\n\ ocupe\ una\ posici\u00F3n\ impar.\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ imprime\ una\ l\u00EDnea\ en\r\n\ blanco.\r\n
comment19.params=numeroTarea
comment19.target=boolean\ eliminarTarea(int)
comment19.text=\r\n\ 23.\ eliminarTarea\ Elimina\ la\ tarea\ cuya\ numeraci\u00F3n\ obtenida\ al\ listar\ las\r\n\ tareas\ coincide\ con\ el\ parametro\ indicado.\ Devuelve\ true\ si\ la\ tarea\ existe\ y\r\n\ se\ elimina\ y\ false\ en\ caso\ contrario\r\n
comment2.params=textoTarea
comment2.target=void\ agregarTarea(java.lang.String)
comment2.text=\r\n\ 09.\ Metodo\ que\ agrega\ una\ tarea\ al\ final\ de\ la\ lista\r\n
comment20.params=texto
comment20.target=java.lang.String\ getPrimeraTareaConElTexto(java.lang.String)
comment20.text=\r\n\ 24.\ getPrimeraTareaConElTexto\ Devuelve\ un\ String\ conteniendo\ la\ primera\ tarea\r\n\ que\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\r\n\ coincidencia\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ for-each.\r\n\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment21.params=texto
comment21.target=void\ imprimePrimeraTareaConTexto(java.lang.String)
comment21.text=\r\n\ 25.\ imprimePrimeraTareaConTexto\ Imprime\ por\ pantalla\ la\ primera\ tarea\ que\r\n\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\r\n\ coincidencia\ imprime\ una\ l\u00EDnea\ en\ blanco.\ La\ coincidencia\ tiene\ que\ ser\r\n\ case-sensitive.\r\n
comment22.params=
comment22.target=java.lang.String\ getListadoTareasWhile()
comment22.text=\r\n\ 26.\ getListadoTareasWhile\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\r\n\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ while.\r\n
comment23.params=
comment23.target=void\ imprimirListadoTareasWhile()
comment23.text=\r\n\ 27.\ imprimirListadoTareasWhile\ Imprime\ por\ pantalla\ todas\ las\ tareas\r\n\ pendientes,\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\r\n\ punto\ y\ un\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\r\n\ imprime\ una\ l\u00EDnea\ en\ blanco.\ El\ m\u00E9todo\ no\ devuelve\ nada.\r\n
comment24.params=textoABuscar
comment24.target=java.lang.String\ getPrimeraTareaConElTextoWhile(java.lang.String)
comment24.text=\r\n\ 28.\ getPrimeraTareaConElTextoWhile\ Devuelve\ un\ String\ conteniendo\ la\ primera\r\n\ tarea\ que\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\r\n\ ninguna\ coincidencia\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\r\n\ while.\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment25.params=textoABuscar
comment25.target=void\ imprimePrimeraTareaConTextoWhile(java.lang.String)
comment25.text=\r\n\ 29.\ imprimePrimeraTareaConTextoWhile\ Imprime\ por\ pantalla\ la\ primera\ tarea\r\n\ que\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\r\n\ coincidencia\ imprime\ una\ l\u00EDnea\ en\ blanco.\ La\ coincidencia\ tiene\ que\ ser\r\n\ case-sensitive.\r\n
comment26.params=numeroTareas
comment26.target=java.lang.String\ getPrimerasTareas(int)
comment26.text=\r\n\ 30.\ getPrimerasTareas\ Devuelve\ un\ String\ conteniendo\ las\ primeras\ n\ tareas\r\n\ (siendo\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea\ con\ su\ n\u00FAmero\ delante.\r\n\ En\ caso\ de\ que\ no\ haya\ suficientes\ se\ devuelven\ solo\ las\ que\ haya.\ En\ caso\ de\r\n\ no\ haber\ tareas\ se\ devuelve\ la\ cadena\ vac\u00EDa.\r\n
comment27.params=numeroTareas
comment27.target=void\ imprimePrimerasTareas(int)
comment27.text=\r\n\ 31.\ imprimePrimerasTareas\ Imprime\ por\ pantalla\ las\ primeras\ n\ tareas\ (siendo\r\n\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea\ con\ su\ n\u00FAmero\ delante.\ En\ caso\r\n\ de\ que\ no\ haya\ suficientes\ se\ imprimen\ solo\ las\ que\ haya.\ En\ caso\ de\ no\ haber\r\n\ tareas\ se\ imprime\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada\ y\ debe\ usar\r\n\ el\ m\u00E9todo\ anterior\r\n
comment28.params=textoABuscar
comment28.target=boolean\ hayTareaConElTextoEficiente(java.lang.String)
comment28.text=\r\n\ 32.\ hayTareaConElTextoEficiente\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\r\n\ contenga\ el\ texto\ indicado\ como\ par\u00E1metro\ y\ false\ en\ caso\ contrario.\ El\r\n\ metodo\ se\ debe\ ejecutar\ de\ la\ forma\ mas\ rapida\ posible\r\n
comment29.params=textoABuscar
comment29.target=java.lang.String\ getTareasConElTexto(java.lang.String)
comment29.text=\r\n\ 33.\ getTareasConElTexto\ Devuelve\ un\ String\ conteniendo\ todas\ las\ tareas\ que\r\n\ contienen\ el\ texto\ indicado\ como\ parametro,\ una\ en\ cada\ linea\ (sin\ n\u00FAmero\r\n\ asociado).\ El\ String\ devuelto\ contiene\ una\ ultima\ linea\ adicional\ que\ indica\r\n\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\ "No\ se\ encontraron\ coincidencias".\r\n\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment3.params=
comment3.target=java.lang.String\ devolverTareas()
comment3.text=\r\n\ 07.\ M\u00E9todo\ que\ devuelve\ un\ String\ con\ todas\ las\ tareas,\ una\ en\ cada\ l\u00EDnea.\ Si\r\n\ no\ hay\ tarea,\ esa\ l\u00EDnea\ contiene\ la\ cadena\ vac\u00EDa.\r\n
comment30.params=textoABuscar
comment30.target=void\ imprimirTareasConElTexto(java.lang.String)
comment30.text=\r\n\ 34.\ imprimirTareasConElTexto\ Muestra\ por\ pantalla\ todas\ las\ tareas\ que\r\n\ contienen\ el\ texto\ indicado\ como\ parametro,\ una\ en\ cada\ linea.\ Se\ imprime\ una\r\n\ ultima\ linea\ adicional\ que\ indica\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\r\n\ "No\ se\ encontraron\ coincidencias"\ si\ no\ hay\ ninguna\ que\ contenga\ el\ texto.\ La\r\n\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment31.params=texto
comment31.target=boolean\ eliminaPrimeraTareaConElTexto(java.lang.String)
comment31.text=\r\n\ 35.\ eliminaPrimeraTareaConElTexto\ Elimina\ la\ primera\ tarea\ que\ contiene\ el\r\n\ texto\ indicado\ por\ par\u00E1metro.\ Devuelve\ true\ si\ se\ elimin\u00F3\ una\ tarea\ o\ false\r\n\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ lo\ mas\ eficiente\ posible\r\n
comment32.params=textoABuscar
comment32.target=int\ eliminaTodasLasTareasConElTexto(java.lang.String)
comment32.text=\r\n\ 36.\ eliminaTodasLasTareasConElTexto\ Elimina\ todas\ las\ tareas\ que\ contienen\ un\r\n\ texto\ pasado\ como\ parametro.\ Devuelve\ el\ numero\ de\ tareas\ eliminadas.\ Hay\ que\r\n\ hacerlo\ con\ un\ bucle\ while.\r\n
comment33.params=numeroTarea\ textoACambiar
comment33.target=boolean\ editarTarea(int,\ java.lang.String)
comment33.text=\r\n\ 37.\ editarTarea\ Modifica\ el\ texto\ de\ la\ tarea\ indicada\ cuyo\ numero\ al\r\n\ listarla\ coincide\ con\ el\ pasado\ como\ primer\ parametro\ dejando\ el\ texto\r\n\ indicado\ en\ el\ segundo\ par\u00E1metro.\ Si\ la\ operaci\u00F3n\ tiene\ exito\ devuelve\r\n\ true;\ false\ en\ caso\ contrario.\r\n
comment34.params=
comment34.target=java.lang.String\ getListaTareasCompletadasYNoCompletadas()
comment34.text=\r\n\ 39.\ getListaTareasCompletadasYNoCompletadas\ Devuelve\ un\ String\ \ con\ todas\ las\r\n\ tareas\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\r\n\ punto\ un\ espacio\ y,\ si\ estan\ completadas,\ un\ corchete,\ una\ x\ y\ otro\ corchete,\r\n\ y\ luego\ el\ texto\ de\ la\ tarea.\ Ejemplo\ de\ tarea\ terminada\ ser\u00EDa\ \r\n\ "1.\ [x]\ Hacer\ la\ cama".\ Ejemplo\ de\ tarea\ no\ terminada\ ser\u00EDa\ "1.\ Hacer\ la\ cama".\ \r\n\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa.\ Se\ asume\ que\ las\ tareas\ cuando\ \r\n\ se\ insertan\ en\ el\ gestor\ no\ est\u00E1n\ completadas.\ No\ se\ pueden\ agregar\ nuevas\ \r\n\ clases\ al\ proyecto.\r\n
comment35.params=numeroTarea
comment35.target=boolean\ marcarComoCompletada(int)
comment35.text=\r\n\ 40.\ marcarComoCompletada\ Marca\ como\ completada\ la\ tarea\ cuyo\ numero\ al\r\n\ listarla\ coincide\ con\ el\ pasado\ como\ parametro\ y\ devuelve\ true\ si\ pudo\r\n\ realizar\ la\ operacion\ o\ false\ en\ caso\ contrario\ (se\ entiende\ que\ una\ tarea\r\n\ que\ ya\ esta\ completada\ no\ se\ puede\ volver\ a\ marcar\ como\ completada)\r\n\ No\ se\ pueden\ agregar\ nuevas\ clases\ al\ proyecto.\ Tampoco\ se\ puede\ cambiar\r\n\ el\ texto\ de\ una\ tarea\ (el\ resto\ de\ m\u00E9todo\ anteriores\ deben\ seguir\r\n\ funcionando\ tal\ y\ como\ estan\ ahora\ mismo)\r\n
comment4.params=
comment4.target=void\ imprimirTareas()
comment4.text=\r\n\ 08.\ M\u00E9todo\ imprimeTareas\ que\ imprime\ por\ pantalla\ las\ tareas\ pendientes\r\n\ basandonse\ en\ el\ m\u00E9todo\ anterior.\ No\ devuelve\ nada\r\n
comment5.params=
comment5.target=int\ getNumeroTareas()
comment5.text=\r\n\ 10.\ Metodo\ getNumeroTareas\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ actuales\ y\ no\ requiere\ par\u00E1metros\r\n
comment6.params=
comment6.target=int\ getNumeroTareas2()
comment6.text=\r\n\ 11.\ Metodo\ getNumeroTareas2\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ actuales\ y\ no\ requiere\ par\u00E1metros.\ No\ se\ puede\ usar\ el\ metodo\ size\r\n
comment7.params=
comment7.target=java.lang.String\ getTareaMasAntigua()
comment7.text=\r\n\ 12.\ getTareaMasAntigua\ Devuelve\ la\ primera\ tarea\ que\ se\ agrego\ al\ gestor\ de\r\n\ tareas;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia;\r\n
comment8.params=
comment8.target=void\ imprimirTareaMasAntigua()
comment8.text=\r\n\ 13.\ imprimirTareaMasAntigua\ Imprime\ la\ primera\ tarea\ que\ se\ agrego\ al\ gestor\r\n\ de\ tareas;\ si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ en\ blanco;\r\n
comment9.params=
comment9.target=java.lang.String\ getListadoTareas()
comment9.text=\r\n\ 14.\ getListadoTareas\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\r\n\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\r\n\ cadena\ vac\u00EDa\r\n
numComments=36
